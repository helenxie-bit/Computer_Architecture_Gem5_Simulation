	.file	"daxpy.cpp"
	.option nopic
	.attribute arch, "rv64i2p0_m2p0_a2p0_f2p0_d2p0_c2p0"
	.attribute unaligned_access, 0
	.attribute stack_align, 16
# GNU C++17 () version 12.2.0 (riscv64-unknown-linux-gnu)
#	compiled by GNU C version 11.3.0, GMP version 6.2.1, MPFR version 4.1.0, MPC version 1.2.1, isl version none
# GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
# options passed: -mtune=rocket -mabi=lp64d -misa-spec=2.2 -march=rv64imafdc -O2
	.text
	.section	.text._ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE11_M_gen_randEv,"axG",@progbits,_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE11_M_gen_randEv,comdat
	.align	1
	.weak	_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE11_M_gen_randEv
	.type	_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE11_M_gen_randEv, @function
_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE11_M_gen_randEv:
.LFB3552:
	.cfi_startproc
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:409: 		       ^ ((__y & 0x01) ? __a : 0));
	lui	a5,%hi(.LC0)	# tmp150,
	ld	a1,0(a0)		# this___M_x_I_lsm0.83, MEM[(long unsigned int *)this_40(D)]
	ld	t5,%lo(.LC0)(a5)		# tmp151,
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:406: 	  _UIntType __y = ((_M_x[__k] & __upper_mask)
	li	t1,-2147483648		# tmp105,
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:408: 	  _M_x[__k] = (_M_x[__k + __m] ^ (__y >> 1)
	li	a7,4096		# tmp111,
	mv	a4,a0	# ivtmp.91, this
	addi	t4,a0,1816	#, _45, this
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:397:     mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,
	mv	a3,a0	# ivtmp.99, this
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:407: 			   | (_M_x[__k + 1] & __lower_mask));
	xori	t3,t1,-1	#, tmp107, tmp105
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:408: 	  _M_x[__k] = (_M_x[__k + __m] ^ (__y >> 1)
	addi	a7,a7,-920	#, tmp110, tmp111
.L3:
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:406: 	  _UIntType __y = ((_M_x[__k] & __upper_mask)
	and	a2,a1,t1	# tmp105, _50, this___M_x_I_lsm0.83
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:407: 			   | (_M_x[__k + 1] & __lower_mask));
	ld	a1,8(a3)		# this___M_x_I_lsm0.83, MEM[(long unsigned int *)_82 + 8B]
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:408: 	  _M_x[__k] = (_M_x[__k + __m] ^ (__y >> 1)
	add	a5,a3,a7	# tmp110, tmp109, ivtmp.99
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:408: 	  _M_x[__k] = (_M_x[__k + __m] ^ (__y >> 1)
	ld	a6,0(a5)		# MEM[(long unsigned int *)_36], MEM[(long unsigned int *)_36]
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:407: 			   | (_M_x[__k + 1] & __lower_mask));
	and	a5,a1,t3	# tmp107, tmp106, this___M_x_I_lsm0.83
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:406: 	  _UIntType __y = ((_M_x[__k] & __upper_mask)
	or	a5,a5,a2	# _50, __y, tmp106
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:408: 	  _M_x[__k] = (_M_x[__k + __m] ^ (__y >> 1)
	srli	a2,a5,1	#, tmp112, __y
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:409: 		       ^ ((__y & 0x01) ? __a : 0));
	andi	a5,a5,1	#, tmp114, __y
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:408: 	  _M_x[__k] = (_M_x[__k + __m] ^ (__y >> 1)
	xor	a2,a2,a6	# MEM[(long unsigned int *)_36], _31, tmp112
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:409: 		       ^ ((__y & 0x01) ? __a : 0));
	beq	a5,zero,.L2	#, tmp114,,
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:409: 		       ^ ((__y & 0x01) ? __a : 0));
	xor	a2,a2,t5	# tmp151, _31, _31
.L2:
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:408: 	  _M_x[__k] = (_M_x[__k + __m] ^ (__y >> 1)
	sd	a2,0(a3)	# _31, MEM[(long unsigned int *)_82]
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:404:       for (size_t __k = 0; __k < (__n - __m); ++__k)
	addi	a3,a3,8	#, ivtmp.99, ivtmp.99
	bne	a3,t4,.L3	#, ivtmp.99, _45,
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:417: 		       ^ ((__y & 0x01) ? __a : 0));
	lui	a5,%hi(.LC0)	# tmp148,
	li	a6,4096		# tmp118,
	ld	a2,1816(a0)		# this___M_x_I_lsm0.82, MEM[(long unsigned int *)this_40(D) + 1816B]
	ld	t3,%lo(.LC0)(a5)		# tmp149,
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:414: 	  _UIntType __y = ((_M_x[__k] & __upper_mask)
	li	a7,-2147483648		# tmp119,
	addi	a6,a6,-928	#, tmp117, tmp118
	add	a6,a0,a6	# tmp117, _17, this
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:415: 			   | (_M_x[__k + 1] & __lower_mask));
	xori	t1,a7,-1	#, tmp121, tmp119
.L5:
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:414: 	  _UIntType __y = ((_M_x[__k] & __upper_mask)
	and	a3,a2,a7	# tmp119, _73, this___M_x_I_lsm0.82
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:415: 			   | (_M_x[__k + 1] & __lower_mask));
	ld	a2,1824(a4)		# this___M_x_I_lsm0.82, MEM[(long unsigned int *)_16 + 1824B]
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:416: 	  _M_x[__k] = (_M_x[__k + (__m - __n)] ^ (__y >> 1)
	ld	a1,0(a4)		# MEM[(long unsigned int *)_16], MEM[(long unsigned int *)_16]
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:415: 			   | (_M_x[__k + 1] & __lower_mask));
	and	a5,a2,t1	# tmp121, tmp120, this___M_x_I_lsm0.82
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:414: 	  _UIntType __y = ((_M_x[__k] & __upper_mask)
	or	a5,a5,a3	# _73, __y, tmp120
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:416: 	  _M_x[__k] = (_M_x[__k + (__m - __n)] ^ (__y >> 1)
	srli	a3,a5,1	#, tmp123, __y
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:417: 		       ^ ((__y & 0x01) ? __a : 0));
	andi	a5,a5,1	#, tmp125, __y
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:416: 	  _M_x[__k] = (_M_x[__k + (__m - __n)] ^ (__y >> 1)
	xor	a3,a3,a1	# MEM[(long unsigned int *)_16], prephitmp_62, tmp123
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:417: 		       ^ ((__y & 0x01) ? __a : 0));
	beq	a5,zero,.L4	#, tmp125,,
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:417: 		       ^ ((__y & 0x01) ? __a : 0));
	xor	a3,a3,t3	# tmp149, prephitmp_62, prephitmp_62
.L4:
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:416: 	  _M_x[__k] = (_M_x[__k + (__m - __n)] ^ (__y >> 1)
	sd	a3,1816(a4)	# prephitmp_62, MEM[(long unsigned int *)_16 + 1816B]
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:412:       for (size_t __k = (__n - __m); __k < (__n - 1); ++__k)
	addi	a4,a4,8	#, ivtmp.91, ivtmp.91
	bne	a4,a6,.L5	#, ivtmp.91, _17,
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:420:       _UIntType __y = ((_M_x[__n - 1] & __upper_mask)
	li	a4,4096		# tmp128,
	add	a4,a0,a4	# tmp128, tmp129, this
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:420:       _UIntType __y = ((_M_x[__n - 1] & __upper_mask)
	ld	a6,888(a4)		# this_40(D)->_M_x[623], this_40(D)->_M_x[623]
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:421: 		       | (_M_x[0] & __lower_mask));
	ld	a3,0(a0)		# this_40(D)->_M_x[0], this_40(D)->_M_x[0]
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:420:       _UIntType __y = ((_M_x[__n - 1] & __upper_mask)
	li	a5,-2147483648		# tmp130,
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:421: 		       | (_M_x[0] & __lower_mask));
	xori	a1,a5,-1	#, tmp135, tmp130
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:422:       _M_x[__n - 1] = (_M_x[__m - 1] ^ (__y >> 1)
	ld	a2,-928(a4)		# this_40(D)->_M_x[396], this_40(D)->_M_x[396]
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:420:       _UIntType __y = ((_M_x[__n - 1] & __upper_mask)
	and	a5,a5,a6	# this_40(D)->_M_x[623], tmp131, tmp130
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:421: 		       | (_M_x[0] & __lower_mask));
	and	a4,a3,a1	# tmp135, tmp133, this_40(D)->_M_x[0]
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:420:       _UIntType __y = ((_M_x[__n - 1] & __upper_mask)
	or	a5,a5,a4	# tmp133, __y, tmp131
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:422:       _M_x[__n - 1] = (_M_x[__m - 1] ^ (__y >> 1)
	srli	a4,a5,1	#, tmp139, __y
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:423: 		       ^ ((__y & 0x01) ? __a : 0));
	andi	a5,a5,1	#, tmp141, __y
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:422:       _M_x[__n - 1] = (_M_x[__m - 1] ^ (__y >> 1)
	xor	a4,a4,a2	# this_40(D)->_M_x[396], _29, tmp139
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:423: 		       ^ ((__y & 0x01) ? __a : 0));
	beq	a5,zero,.L6	#, tmp141,,
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:423: 		       ^ ((__y & 0x01) ? __a : 0));
	lui	a5,%hi(.LC0)	# tmp143,
	ld	a5,%lo(.LC0)(a5)		# tmp142,
	xor	a4,a4,a5	# tmp142, _29, _29
.L6:
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:422:       _M_x[__n - 1] = (_M_x[__m - 1] ^ (__y >> 1)
	li	a5,4096		# tmp144,
	add	a0,a0,a5	# tmp144, tmp145, this
	sd	a4,888(a0)	# _29, this_40(D)->_M_x[623]
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:424:       _M_p = 0;
	sd	zero,896(a0)	#, this_40(D)->_M_p
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:425:     }
	ret	
	.cfi_endproc
.LFE3552:
	.size	_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE11_M_gen_randEv, .-_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE11_M_gen_randEv
	.section	.text._ZSt18generate_canonicalIdLm53ESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEET_RT1_,"axG",@progbits,_ZSt18generate_canonicalIdLm53ESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEET_RT1_,comdat
	.align	1
	.weak	_ZSt18generate_canonicalIdLm53ESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEET_RT1_
	.type	_ZSt18generate_canonicalIdLm53ESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEET_RT1_, @function
_ZSt18generate_canonicalIdLm53ESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEET_RT1_:
.LFB3512:
	.cfi_startproc
	addi	sp,sp,-112	#,,
	.cfi_def_cfa_offset 112
	sd	s3,72(sp)	#,
	.cfi_offset 19, -40
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:458:       if (_M_p >= state_size)
	li	s3,4096		# tmp95,
	add	s3,a0,s3	# tmp95, tmp96, __urng
	ld	a4,896(s3)		# prephitmp_64, __urng_14(D)->_M_p
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:3354:     generate_canonical(_UniformRandomNumberGenerator& __urng)
	sd	s1,88(sp)	#,
	.cfi_offset 9, -24
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:464:       __z ^= (__z << __s) & __b;
	li	s1,20602880		# tmp109,
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:3354:     generate_canonical(_UniformRandomNumberGenerator& __urng)
	sd	s0,96(sp)	#,
	sd	s2,80(sp)	#,
	sd	s4,64(sp)	#,
	sd	s5,56(sp)	#,
	sd	s6,48(sp)	#,
	sd	s7,40(sp)	#,
	sd	s8,32(sp)	#,
	fsd	fs0,24(sp)	#,
	fsd	fs1,16(sp)	#,
	fsd	fs2,8(sp)	#,
	.cfi_offset 8, -16
	.cfi_offset 18, -32
	.cfi_offset 20, -48
	.cfi_offset 21, -56
	.cfi_offset 22, -64
	.cfi_offset 23, -72
	.cfi_offset 24, -80
	.cfi_offset 40, -88
	.cfi_offset 41, -96
	.cfi_offset 50, -104
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:3369:       _RealType __tmp = _RealType(1);
	lui	s6,%hi(.LC1)	# tmp124,
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:3373: 	  __tmp *= __r;
	lui	a5,%hi(.LC3)	# tmp125,
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:463:       __z ^= (__z >> __u) & __d;
	li	s4,-1		# tmp106,
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:464:       __z ^= (__z << __s) & __b;
	addi	s1,s1,-1875	#, tmp110, tmp109
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:465:       __z ^= (__z << __t) & __c;
	li	s2,125710336		# tmp113,
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:3354:     generate_canonical(_UniformRandomNumberGenerator& __urng)
	sd	ra,104(sp)	#,
	.cfi_offset 1, -8
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:458:       if (_M_p >= state_size)
	li	s7,623		# tmp97,
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:3369:       _RealType __tmp = _RealType(1);
	fld	fs1,%lo(.LC1)(s6)	# __tmp,
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:3368:       _RealType __sum = _RealType(0);
	fmv.d.x	fs0,zero	# __sum,
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:3373: 	  __tmp *= __r;
	fld	fs2,%lo(.LC3)(a5)	# tmp116,
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:3354:     generate_canonical(_UniformRandomNumberGenerator& __urng)
	mv	s0,a0	# __urng, tmp126
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:458:       if (_M_p >= state_size)
	li	s5,2		# ivtmp_61,
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:463:       __z ^= (__z >> __u) & __d;
	srli	s4,s4,32	#, tmp105, tmp106
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:464:       __z ^= (__z << __s) & __b;
	slli	s1,s1,7	#, tmp108, tmp110
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:465:       __z ^= (__z << __t) & __c;
	slli	s2,s2,5	#, tmp112, tmp113
	li	s8,1		# ivtmp_17,
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:458:       if (_M_p >= state_size)
	bgtu	a4,s7,.L26	#, prephitmp_64, tmp97,
.L20:
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:462:       result_type __z = _M_x[_M_p++];
	slli	a5,a4,3	#, tmp102, prephitmp_64
	add	a5,s0,a5	# tmp102, tmp103, __urng
	ld	a5,0(a5)		# __z, __urng_14(D)->_M_x[prephitmp_66]
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:462:       result_type __z = _M_x[_M_p++];
	addi	a4,a4,1	#, _23, prephitmp_64
	sd	a4,896(s3)	# _23, __urng_14(D)->_M_p
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:463:       __z ^= (__z >> __u) & __d;
	srli	a3,a5,11	#, tmp104, __z
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:463:       __z ^= (__z >> __u) & __d;
	and	a3,a3,s4	# tmp105, _26, tmp104
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:463:       __z ^= (__z >> __u) & __d;
	xor	a5,a5,a3	# _26, __z, __z
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:464:       __z ^= (__z << __s) & __b;
	slli	a3,a5,7	#, tmp107, __z
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:464:       __z ^= (__z << __s) & __b;
	and	a3,a3,s1	# tmp108, _29, tmp107
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:464:       __z ^= (__z << __s) & __b;
	xor	a5,a5,a3	# _29, __z, __z
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:465:       __z ^= (__z << __t) & __c;
	slli	a3,a5,15	#, tmp111, __z
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:465:       __z ^= (__z << __t) & __c;
	and	a3,a3,s2	# tmp112, _32, tmp111
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:465:       __z ^= (__z << __t) & __c;
	xor	a5,a5,a3	# _32, __z, __z
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:466:       __z ^= (__z >> __l);
	srli	a3,a5,18	#, _34, __z
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:466:       __z ^= (__z >> __l);
	xor	a5,a5,a3	# _34, __z, __z
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:3372: 	  __sum += _RealType(__urng() - __urng.min()) * __tmp;
	fcvt.d.lu	fa5,a5	# tmp115, __z
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:3372: 	  __sum += _RealType(__urng() - __urng.min()) * __tmp;
	fmadd.d	fs0,fa5,fs1,fs0	# __sum, tmp115, __tmp, __sum
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:3373: 	  __tmp *= __r;
	fmul.d	fs1,fs1,fs2	# __tmp, __tmp, tmp116
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:3370:       for (size_t __k = __m; __k != 0; --__k)
	beq	s5,s8,.L27	#, ivtmp_61, ivtmp_17,
	li	s5,1		# ivtmp_61,
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:458:       if (_M_p >= state_size)
	bleu	a4,s7,.L20	#, prephitmp_64, tmp97,
.L26:
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:459: 	_M_gen_rand();
	mv	a0,s0	#, __urng
	call	_ZNSt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EE11_M_gen_randEv		#
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:462:       result_type __z = _M_x[_M_p++];
	li	a5,4096		# tmp98,
	add	a5,s0,a5	# tmp98, tmp99, __urng
	ld	a4,896(a5)		# prephitmp_64, __urng_14(D)->_M_p
	j	.L20		#
.L27:
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:3375:       __ret = __sum / __tmp;
	fdiv.d	fa0,fs0,fs1	# <retval>, __sum, __tmp
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:3376:       if (__builtin_expect(__ret >= _RealType(1), 0))
	fld	fa5,%lo(.LC1)(s6)	# tmp120,
	fge.d	a5,fa0,fa5	#, tmp122, <retval>, tmp120
	bne	a5,zero,.L28	#, tmp122,,
.L19:
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:3386:     }
	ld	ra,104(sp)		#,
	.cfi_remember_state
	.cfi_restore 1
	ld	s0,96(sp)		#,
	.cfi_restore 8
	ld	s1,88(sp)		#,
	.cfi_restore 9
	ld	s2,80(sp)		#,
	.cfi_restore 18
	ld	s3,72(sp)		#,
	.cfi_restore 19
	ld	s4,64(sp)		#,
	.cfi_restore 20
	ld	s5,56(sp)		#,
	.cfi_restore 21
	ld	s6,48(sp)		#,
	.cfi_restore 22
	ld	s7,40(sp)		#,
	.cfi_restore 23
	ld	s8,32(sp)		#,
	.cfi_restore 24
	fld	fs0,24(sp)	#,
	.cfi_restore 40
	fld	fs1,16(sp)	#,
	.cfi_restore 41
	fld	fs2,8(sp)	#,
	.cfi_restore 50
	addi	sp,sp,112	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
.L28:
	.cfi_restore_state
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:3379: 	  __ret = std::nextafter(_RealType(1), _RealType(0));
	lui	a5,%hi(.LC2)	# tmp94,
	fld	fa0,%lo(.LC2)(a5)	# <retval>,
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:3385:       return __ret;
	j	.L19		#
	.cfi_endproc
.LFE3512:
	.size	_ZSt18generate_canonicalIdLm53ESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEET_RT1_, .-_ZSt18generate_canonicalIdLm53ESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEET_RT1_
	.section	.rodata.str1.8,"aMS",@progbits,1
	.align	3
.LC5:
	.string	"%lf\n"
	.section	.text.startup,"ax",@progbits
	.align	1
	.globl	main
	.type	main, @function
main:
.LFB2844:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2844
	addi	sp,sp,-1904	#,,
	.cfi_def_cfa_offset 1904
	sd	s0,1888(sp)	#,
	li	t0,-2105344		#,
	.cfi_offset 8, -16
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/basic_string.h:200: 	: allocator_type(__a), _M_p(__dat) { }
	li	s0,2105344		# tmp203,
# daxpy.cpp:9: {
	sd	ra,1896(sp)	#,
	sd	s1,1880(sp)	#,
	sd	s2,1872(sp)	#,
	sd	s3,1864(sp)	#,
	sd	s4,1856(sp)	#,
	sd	s5,1848(sp)	#,
	fsd	fs0,1832(sp)	#,
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/basic_string.h:200: 	: allocator_type(__a), _M_p(__dat) { }
	li	a1,-1048576		# tmp108,
# daxpy.cpp:9: {
	add	sp,sp,t0	#,,
	.cfi_def_cfa_offset 2107248
	.cfi_offset 1, -8
	.cfi_offset 9, -24
	.cfi_offset 18, -32
	.cfi_offset 19, -40
	.cfi_offset 20, -48
	.cfi_offset 21, -56
	.cfi_offset 40, -72
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/basic_string.h:200: 	: allocator_type(__a), _M_p(__dat) { }
	addi	a5,s0,1808	#, tmp202, tmp203
	add	a5,a5,a1	# tmp108, tmp202, tmp202
	addi	a4,sp,16	#, tmp246,
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.h:1621:     random_device() { _M_init("default"); }
	li	a0,-2105344		# tmp130,
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/basic_string.h:200: 	: allocator_type(__a), _M_p(__dat) { }
	add	a1,a5,a4	# tmp246, tmp109, tmp202
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.h:1621:     random_device() { _M_init("default"); }
	addi	a0,a0,-1808	#, tmp129, tmp130
	addi	a4,s0,1808	#, tmp204, tmp205
	add	a4,a4,a0	# tmp129, tmp204, tmp204
	addi	a3,sp,16	#, tmp245,
	add	a0,a4,a3	# tmp245,, tmp204
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/char_traits.h:431: 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
	li	a4,1634099200		# tmp117,
	addi	a4,a4,1380	#, tmp116, tmp117
	sw	a4,16(a1)	# tmp116, MEM <char[1:7]> [(void *)_109]
	li	a4,28672		# tmp119,
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/basic_string.h:200: 	: allocator_type(__a), _M_p(__dat) { }
	addi	a5,a1,16	#, tmp112, tmp109
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/char_traits.h:431: 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
	addi	a4,a4,-907	#, tmp118, tmp119
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/basic_string.h:200: 	: allocator_type(__a), _M_p(__dat) { }
	sd	a5,0(a1)	# tmp112, MEM[(struct _Alloc_hider *)_109]._M_p
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/char_traits.h:431: 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
	sh	a4,20(a1)	# tmp118, MEM <char[1:7]> [(void *)_109]
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/basic_string.h:229:       { _M_string_length = __length; }
	li	a5,7		# tmp123,
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/char_traits.h:431: 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
	li	a4,116		# tmp120,
	sb	a4,22(a1)	# tmp120, MEM <char[1:7]> [(void *)_109]
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/basic_string.h:229:       { _M_string_length = __length; }
	sd	a5,8(a1)	# tmp123, MEM[(struct basic_string *)_109]._M_string_length
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/char_traits.h:354: 	__c1 = __c2;
	sb	zero,23(a1)	#, MEM[(char_type &)_109]
.LEHB0:
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.h:1621:     random_device() { _M_init("default"); }
	call	_ZNSt13random_device7_M_initERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE		#
.LEHE0:
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/basic_string.h:234:       { return _M_dataplus._M_p; }
	li	a5,-1048576		# tmp131,
	addi	a4,s0,1808	#, tmp207, tmp208
	add	a4,a4,a5	# tmp131, tmp207, tmp207
	addi	a5,sp,16	#, tmp244,
	add	a5,a4,a5	# tmp244, tmp132, tmp207
	ld	a0,0(a5)		# _59, MEM[(struct basic_string *)_109]._M_dataplus._M_p
	sd	a5,8(sp)	# tmp132, %sfp
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/basic_string.h:285: 	if (!_M_is_local())
	addi	a5,a5,16	#, tmp135, tmp132
	beq	a0,a5,.L30	#, _59, tmp135,
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/basic_string.h:292:       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
	ld	a5,8(sp)		# tmp132, %sfp
	ld	a1,16(a5)		# MEM[(struct basic_string *)_109].D.32614._M_allocated_capacity, MEM[(struct basic_string *)_109].D.32614._M_allocated_capacity
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/new_allocator.h:158: 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
	addi	a1,a1,1	#,, MEM[(struct basic_string *)_109].D.32614._M_allocated_capacity
	call	_ZdlPvm		#
.L30:
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.h:1651:     { return this->_M_getval(); }
	li	a0,-2105344		# tmp142,
	li	s0,2105344		# tmp213,
	addi	a0,a0,-1808	#, tmp141, tmp142
	addi	a5,s0,1808	#, tmp212, tmp213
	add	a5,a5,a0	# tmp141, tmp212, tmp212
	addi	a4,sp,16	#, tmp243,
	add	a0,a5,a4	# tmp243,, tmp212
.LEHB1:
	call	_ZNSt13random_device9_M_getvalEv		#
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:330:       _M_x[0] = __detail::__mod<_UIntType,
	li	a5,-2101248		# tmp147,
	addi	a3,s0,1808	#, tmp214, tmp215
# daxpy.cpp:12:   std::random_device rd; std::mt19937 gen(rd());
	slli	a4,a0,32	#, __res, tmp196
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:330:       _M_x[0] = __detail::__mod<_UIntType,
	addi	a2,sp,16	#, tmp241,
	add	a3,a3,a5	# tmp147, tmp214, tmp214
	add	a3,a3,a2	# tmp241, tmp148, tmp214
# daxpy.cpp:12:   std::random_device rd; std::mt19937 gen(rd());
	srli	a4,a4,32	#, __res, __res
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:337: 	  __x *= __f;
	li	a0,1812434944		# tmp154,
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.h:143: 	    __res %= __m;
	li	a1,-1		# tmp157,
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:330:       _M_x[0] = __detail::__mod<_UIntType,
	sd	a4,-904(a3)	# __res, gen._M_x[0]
	addi	a2,a3,-896	#, ivtmp.151, tmp149
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:337: 	  __x *= __f;
	addi	a0,a0,-1691	#, tmp153, tmp154
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:333:       for (size_t __i = 1; __i < state_size; ++__i)
	li	a3,1		# __i,
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.h:143: 	    __res %= __m;
	srli	a1,a1,32	#, tmp156, tmp157
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:333:       for (size_t __i = 1; __i < state_size; ++__i)
	li	a6,624		# tmp158,
.L33:
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:336: 	  __x ^= __x >> (__w - 2);
	srli	a5,a4,30	#, tmp152, __res
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:336: 	  __x ^= __x >> (__w - 2);
	xor	a5,a5,a4	# __res, __x, tmp152
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:337: 	  __x *= __f;
	mul	a5,a5,a0	# __x, __x, tmp153
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:333:       for (size_t __i = 1; __i < state_size; ++__i)
	addi	a2,a2,8	#, ivtmp.151, ivtmp.151
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:338: 	  __x += __detail::__mod<_UIntType, __n>(__i);
	add	a5,a5,a3	# __i, __x, __x
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.h:143: 	    __res %= __m;
	and	a4,a5,a1	# tmp156, __res, __x
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:339: 	  _M_x[__i] = __detail::__mod<_UIntType,
	sd	a4,-8(a2)	# __res, MEM[(long unsigned int *)_115]
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:333:       for (size_t __i = 1; __i < state_size; ++__i)
	addi	a3,a3,1	#, __i, __i
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:333:       for (size_t __i = 1; __i < state_size; ++__i)
	bne	a3,a6,.L33	#, __i, tmp158,
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:342:       _M_p = state_size;
	li	a2,4096		# tmp221,
	addi	a1,sp,16	#, tmp235,
	addi	a2,a2,1808	#, tmp220, tmp221
	add	a2,a2,a1	# tmp235, tmp220, tmp220
	li	a4,4096		# tmp161,
	add	a4,a2,a4	# tmp161, tmp162, tmp220
	li	a1,2105344		# tmp223,
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.h:1873: 	  return (__aurng() * (__p.b() - __p.a())) + __p.a();
	lui	a2,%hi(.LC1)	# tmp194,
	li	s0,-1048576		# tmp165,
	fld	fs0,%lo(.LC1)(a2)	# tmp171,
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:342:       _M_p = state_size;
	li	a5,-2101248		# tmp159,
	addi	a2,a1,1808	#, tmp222, tmp223
	li	s5,1048576		# tmp166,
	addi	a0,sp,16	#, tmp239,
	mv	s2,a4	# ivtmp.132, tmp162
	add	a2,a2,s0	# tmp165, tmp222, tmp222
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.h:194: 	                            _Engine>(_M_g);
	addi	a5,a5,-904	#, tmp168, tmp159
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:342:       _M_p = state_size;
	sd	a3,-8(a4)	# __i, gen._M_p
	add	s5,a4,s5	# tmp166, _110, ivtmp.132
	mv	s1,a4	# ivtmp.141, ivtmp.132
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.h:194: 	                            _Engine>(_M_g);
	addi	a4,a1,1808	#, tmp224, tmp225
	add	s0,a2,a0	# tmp239, ivtmp.125, tmp222
	add	a4,a4,a5	# tmp168, tmp224, tmp224
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.tcc:342:       _M_p = state_size;
	mv	s3,s0	# ivtmp.142, ivtmp.125
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.h:194: 	                            _Engine>(_M_g);
	add	s4,a4,a0	# tmp238, tmp167, tmp224
.L34:
	mv	a0,s4	#, tmp167
	call	_ZSt18generate_canonicalIdLm53ESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEET_RT1_		#
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.h:1873: 	  return (__aurng() * (__p.b() - __p.a())) + __p.a();
	fadd.d	fa0,fa0,fs0	# tmp170, tmp198, tmp171
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.h:194: 	                            _Engine>(_M_g);
	mv	a0,s4	#, tmp167
# daxpy.cpp:14:   for (int i = 0; i < N; ++i)
	addi	s3,s3,8	#, ivtmp.142, ivtmp.142
	addi	s1,s1,8	#, ivtmp.141, ivtmp.141
# daxpy.cpp:16:     X[i] = dis(gen);
	fsd	fa0,-8(s1)	# tmp170, MEM[(double *)_107]
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.h:194: 	                            _Engine>(_M_g);
	call	_ZSt18generate_canonicalIdLm53ESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEET_RT1_		#
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.h:1873: 	  return (__aurng() * (__p.b() - __p.a())) + __p.a();
	fadd.d	fa0,fa0,fs0	# tmp176, tmp199, tmp171
# daxpy.cpp:17:     Y[i] = dis(gen);
	fsd	fa0,-8(s3)	# tmp176, MEM[(double *)_108]
# daxpy.cpp:14:   for (int i = 0; i < N; ++i)
	bne	s1,s5,.L34	#, ivtmp.141, _110,
# daxpy.cpp:21: m5_work_begin(0,0);
	li	a1,0		#,
	li	a0,0		#,
	call	m5_work_begin		#
	lui	a5,%hi(.LC4)	# tmp195,
	li	s1,1048576		# tmp179,
# daxpy.cpp:27:     Y[i] = alpha * X[i] + Y[i];
	fld	fa3,%lo(.LC4)(a5)	# tmp181,
	add	s1,s0,s1	# tmp179, _14, ivtmp.125
# daxpy.cpp:21: m5_work_begin(0,0);
	mv	a5,s0	# ivtmp.133, ivtmp.125
.L35:
# daxpy.cpp:27:     Y[i] = alpha * X[i] + Y[i];
	fld	fa4,0(a5)	# MEM[(double *)_56], MEM[(double *)_56]
	fld	fa5,0(s2)	# MEM[(double *)_49], MEM[(double *)_49]
# daxpy.cpp:25:   for (int i = 0; i < N; ++i)
	addi	a5,a5,8	#, ivtmp.133, ivtmp.133
	addi	s2,s2,8	#, ivtmp.132, ivtmp.132
# daxpy.cpp:27:     Y[i] = alpha * X[i] + Y[i];
	fmadd.d	fa5,fa5,fa3,fa4	# _5, MEM[(double *)_49], tmp181, MEM[(double *)_56]
# daxpy.cpp:27:     Y[i] = alpha * X[i] + Y[i];
	fsd	fa5,-8(a5)	# _5, MEM[(double *)_56]
# daxpy.cpp:25:   for (int i = 0; i < N; ++i)
	bne	s1,a5,.L35	#, _14, ivtmp.133,
# daxpy.cpp:32:     m5_work_end(0,0);
	li	a1,0		#,
	li	a0,0		#,
	call	m5_work_end		#
# daxpy.cpp:35:   double sum = 0;
	fmv.d.x	fa5,zero	# sum,
.L36:
# daxpy.cpp:38:     sum += Y[i];
	fld	fa4,0(s0)	# MEM[(double *)_9], MEM[(double *)_9]
# daxpy.cpp:36:   for (int i = 0; i < N; ++i)
	addi	s0,s0,8	#, ivtmp.125, ivtmp.125
# daxpy.cpp:38:     sum += Y[i];
	fadd.d	fa5,fa5,fa4	# sum, sum, MEM[(double *)_9]
# daxpy.cpp:36:   for (int i = 0; i < N; ++i)
	bne	s0,s1,.L36	#, ivtmp.125, _14,
# daxpy.cpp:40:   printf("%lf\n", sum);
	fmv.x.d	a1,fa5	#, sum
	lui	a0,%hi(.LC5)	# tmp185,
	addi	a0,a0,%lo(.LC5)	#, tmp185,
	call	printf		#
.LEHE1:
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.h:1628:     { _M_fini(); }
	li	a0,-2105344		# tmp188,
	li	a5,2105344		# tmp227,
	addi	a0,a0,-1808	#, tmp187, tmp188
	addi	a5,a5,1808	#, tmp226, tmp227
	addi	a4,sp,16	#, tmp237,
	add	a5,a5,a0	# tmp187, tmp226, tmp226
	add	a0,a5,a4	# tmp237,, tmp226
	call	_ZNSt13random_device7_M_finiEv		#
# daxpy.cpp:42: }
	li	t0,2105344		#,
	add	sp,sp,t0	#,,
	.cfi_remember_state
	.cfi_def_cfa_offset 1904
	ld	ra,1896(sp)		#,
	.cfi_restore 1
	ld	s0,1888(sp)		#,
	.cfi_restore 8
	ld	s1,1880(sp)		#,
	.cfi_restore 9
	ld	s2,1872(sp)		#,
	.cfi_restore 18
	ld	s3,1864(sp)		#,
	.cfi_restore 19
	ld	s4,1856(sp)		#,
	.cfi_restore 20
	ld	s5,1848(sp)		#,
	.cfi_restore 21
	fld	fs0,1832(sp)	#,
	.cfi_restore 40
	li	a0,0		#,
	addi	sp,sp,1904	#,,
	.cfi_def_cfa_offset 0
	jr	ra		#
.L39:
	.cfi_restore_state
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/basic_string.h:795:       { _M_dispose(); }
	li	a5,2105344		# tmp219,
	mv	s0,a0	# tmp146, tmp197
	addi	a5,a5,1808	#, tmp218, tmp219
	li	a0,-1048576		# tmp144,
	add	a5,a5,a0	# tmp144, tmp218, tmp218
	addi	a4,sp,16	#, tmp242,
	add	a0,a5,a4	# tmp242,, tmp218
	call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv		#
	mv	a0,s0	#, tmp146
.LEHB2:
	call	_Unwind_Resume		#
.LEHE2:
.L38:
# /scr/riscv/riscv64-unknown-linux-gnu/include/c++/12.2.0/bits/random.h:1628:     { _M_fini(); }
	mv	s0,a0	# tmp193, tmp200
	li	a5,2105344		# tmp229,
	li	a0,-2105344		# tmp192,
	addi	a0,a0,-1808	#, tmp191, tmp192
	addi	a5,a5,1808	#, tmp228, tmp229
	add	a5,a5,a0	# tmp191, tmp228, tmp228
	addi	a4,sp,16	#, tmp236,
	add	a0,a5,a4	# tmp236,, tmp228
	call	_ZNSt13random_device7_M_finiEv		#
	mv	a0,s0	#, tmp193
.LEHB3:
	call	_Unwind_Resume		#
.LEHE3:
	.cfi_endproc
.LFE2844:
	.globl	__gxx_personality_v0
	.section	.gcc_except_table,"a",@progbits
.LLSDA2844:
	.byte	0xff
	.byte	0xff
	.byte	0x3
	.byte	0x34
	.4byte	.LEHB0-.LFB2844
	.4byte	.LEHE0-.LEHB0
	.4byte	.L39-.LFB2844
	.byte	0
	.4byte	.LEHB1-.LFB2844
	.4byte	.LEHE1-.LEHB1
	.4byte	.L38-.LFB2844
	.byte	0
	.4byte	.LEHB2-.LFB2844
	.4byte	.LEHE2-.LEHB2
	.4byte	0
	.byte	0
	.4byte	.LEHB3-.LFB2844
	.4byte	.LEHE3-.LEHB3
	.4byte	0
	.byte	0
	.section	.text.startup
	.size	main, .-main
	.section	.srodata.cst8,"aM",@progbits,8
	.align	3
.LC0:
	.dword	2567483615
	.align	3
.LC1:
	.word	0
	.word	1072693248
	.align	3
.LC2:
	.word	-1
	.word	1072693247
	.align	3
.LC3:
	.word	0
	.word	1106247680
	.align	3
.LC4:
	.word	0
	.word	1071644672
	.hidden	DW.ref.__gxx_personality_v0
	.weak	DW.ref.__gxx_personality_v0
	.section	.sdata.DW.ref.__gxx_personality_v0,"awG",@progbits,DW.ref.__gxx_personality_v0,comdat
	.align	3
	.type	DW.ref.__gxx_personality_v0, @object
	.size	DW.ref.__gxx_personality_v0, 8
DW.ref.__gxx_personality_v0:
	.dword	__gxx_personality_v0
	.ident	"GCC: () 12.2.0"
	.section	.note.GNU-stack,"",@progbits
